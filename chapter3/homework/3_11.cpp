#include <stdio.h>

/*
	汇编语句: xorq	%rdx,%rdx
	
	A. 解释这条特殊的 EXCLUSIVE-OR 指令的效果，它实现了什么有用的操作。

	对寄存器%rdx进行置零, 因为 x ^ x = 0, 相当于c语句的 x = 0;

	B. 更直接地表达这个操作的汇编代码是什么？

	movq $0,%rdx


	C. 比较同样一个操作的两种不同实现的编码字节长度。

	 1. xorq	%rdx,%rdx	占用3字节, 构成如下 	=> 
		- xorq 操作码部分占用 1 个字节
		- %rdx 寄存器标识部分占用 1 个字节
		- %rdx 寄存器标识部分占用 1 个字节


	 2. movq $0,%rdx

		- movq 操作码部分占用 1 个字节
		- 立即数操作数标识部分占用 1 个字节
		- 8 字节立即数数据部分占用 4 个字节 (其他将 %rdx 设置为 0 的方法都依赖于这样一个属性，即任何更新低位 4 字节的指令都会把高位字节设置为 0 。)
		- %rdx 寄存器标识部分占用 1 个字节

*/
int test() {

}