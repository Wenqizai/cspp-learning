#include <stdio.h>

/*
	A. 用数学语言解释第 5~7 行中计算 S2 的逻辑。提示：想想 -16 的位级表示以及它在第 6 行 andq 指令中的作用。

	5: 加载 8n + 22 到 %rax
	6: 操作 %rax & -16, 该指令的作用是, 将它向下舍入到最接近 16 的倍数,
	   当 n 是奇数时, 结果值会是 8n + 8, 当 n 是偶数时, 结果值会是 8n + 16, 这个值减去 s1 就得到 s2.
	7: 栈分配空间 
	
	B. 用数学语言解释第 8~10 行中计算 p 的逻辑 。提示：可以参考 2.3.7 节中有关除以 2 的幂的讨论 。
		
	8: 访问数组 p 的起始位置
	9: 计算数组被分成 8 份后每份的大小, 利用移位操作加强除法的效率, 可能会有舍位, 但接近 8 倍
	10: 访问数组起始位置, p[0], 复制值到 %r8

	C. 补充完整下列的值


		n		s1			s2		p		e1		e2
		5		2065		2017	2024	1		7	
		
		6		2064		2000	2007	16		0


*/

#define n 10
#define idx 5

long vframe(long* q) {
	long i;
	long* p[n];
	p[0] = &i;
	for (i = 1; i < n; i++) {
		p[i] = q;
	}
	return *p[idx];
}